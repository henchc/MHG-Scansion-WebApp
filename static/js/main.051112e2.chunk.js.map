{"version":3,"sources":["components/Button.js","components/TextBox.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["Button","onClick","style","marginTop","width","variant","color","TextBox","text","setText","TextField","margin","label","fullWidth","multiline","rows","value","onChange","e","target","postGenerateTextEndpoint","fn","React","useState","data","complete","pending","error","res","setRes","req","setReq","useEffect","axios","then","catch","useAsyncEndpoint","url","method","App","generatedText","postGenerateText","className","noValidate","autoComplete","userId","arr","split","resultArr","forEach","item","i","push","postProcessText","body","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uRAceA,EAVA,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACX,kBAAC,IAAD,CACIC,MAAO,CAAEC,UAAW,MAAOC,MAAO,eAClCH,QAASA,EACTI,QAAQ,WACRC,MAAM,WAJV,S,SCWWC,EAbC,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAAT,OACZ,kBAACC,EAAA,EAAD,CACIC,OAAO,SACPC,MAAM,qCACNP,QAAQ,WACRQ,WAAS,EACTC,WAAS,EACTC,KAAK,KACLC,MAAOR,EACPS,SAAU,SAAAC,GAAC,OAAIT,EAAQS,EAAEC,OAAOH,W,yBCY3BI,EAA2B,WAEpC,OArBqB,SAAAC,GAAO,IAAD,EACLC,IAAMC,SAAS,CAAEC,KAAM,KAAMC,UAAU,EAAOC,SAAS,EAAOC,OAAO,IADhE,mBACpBC,EADoB,KACfC,EADe,OAELP,IAAMC,WAFD,mBAEpBO,EAFoB,KAEfC,EAFe,KAgB3B,OAZAT,IAAMU,WAAU,WACPF,IACLD,EAAO,CAAEL,KAAM,KAAME,SAAS,EAAMC,OAAO,EAAOF,UAAU,IAC5DQ,IAAMH,GACDI,MAAK,SAAAN,GAAG,OACLC,EAAO,CAAEL,KAAMI,EAAIJ,KAAME,SAAS,EAAOC,OAAO,EAAOF,UAAU,OAEpEU,OAAM,kBACHN,EAAO,CAAEL,KAAM,KAAME,SAAS,EAAOC,OAAO,EAAMF,UAAU,UAErE,CAACK,IAEG,CAACF,EAAK,kBAAaG,EAAOV,EAAE,WAAF,gBAK1Be,EAAiB,SAAAZ,GAAI,MAAK,CAAEa,IAvBlB,2EAuBqCC,OAAQ,OAAQd,YCmB3De,MA7Bf,WAAgB,IAAD,EACWhB,mBAAS,IADpB,mBACNf,EADM,KACAC,EADA,OAE6BW,IAF7B,mBAENoB,EAFM,KAESC,EAFT,KAQb,OACE,yBAAKC,UAAU,iBACb,0BAAMC,YAAU,EAACC,aAAa,OAC5B,2DACA,kBAAC,EAAD,CAASpC,KAAMA,EAAMC,QAASA,IAC9B,kBAAC,EAAD,CAAQR,QATO,WACnBwC,EAAiB,CAAEjC,OAAMqC,OAAQ,QAW9BL,EAAcd,SACb,yBAAKgB,UAAU,kBAAf,eAEDF,EAAcf,WACZe,EAAcb,MACb,yBAAKe,UAAU,gBAAf,eACA,yBAAKA,UAAU,gBAhCzB,SAAyBlC,GACrB,IAAMsC,EAAMtC,EAAKuC,MAAM,MACjBC,EAAY,GAKpB,OAJEF,EAAIG,SAAQ,SAACC,EAAMC,GACdA,EAAE,IAAI,GAAGH,EAAUI,KAAK,8BAC3BJ,EAAUI,KAAKF,MAEZF,EA0BIK,CAAgBb,EAAchB,KAAK8B,UC3B5BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhC,MAAK,SAAAiC,GACjCA,EAAaC,kB","file":"static/js/main.051112e2.chunk.js","sourcesContent":["import { Button as MaterialButton } from '@material-ui/core';\nimport React from 'react';\n\n\nconst Button = ({ onClick }) => (\n    <MaterialButton\n        style={{ marginTop: '1em', width: 'fit-content' }}\n        onClick={onClick}\n        variant=\"outlined\"\n        color=\"primary\">\n        Scan\n  </MaterialButton>\n)\n\nexport default Button;","import React from 'react';\nimport { TextField } from '@material-ui/core';\n\nconst TextBox = ({ text, setText }) => (\n    <TextField\n        margin='normal'\n        label=\"Ein ritter sô gelêret was...\"\n        variant=\"outlined\"\n        fullWidth\n        multiline\n        rows='10'\n        value={text}\n        onChange={e => setText(e.target.value)}\n    />\n);\n\nexport default TextBox;\n","import React from 'react';\nimport axios from 'axios';\n\nconst ENDPOINT_URL = \"https://7icr15ch6f.execute-api.us-east-2.amazonaws.com/prod/mhg-scansion\";\n\nconst useAsyncEndpoint = fn => {\n    const [res, setRes] = React.useState({ data: null, complete: false, pending: false, error: false });\n    const [req, setReq] = React.useState();\n\n    React.useEffect(() => {\n        if (!req) return;\n        setRes({ data: null, pending: true, error: false, complete: false });\n        axios(req)\n            .then(res =>\n                setRes({ data: res.data, pending: false, error: false, complete: true })\n            )\n            .catch(() =>\n                setRes({ data: null, pending: false, error: true, complete: true })\n            );\n    }, [req]);\n\n    return [res, (...args) => setReq(fn(...args))];\n}\n\nexport const postGenerateTextEndpoint = () => {\n    /* eslint-disable react-hooks/rules-of-hooks */\n    return useAsyncEndpoint(data => ({ url: ENDPOINT_URL, method: \"POST\", data }));\n}","import React, { useState } from 'react';\nimport Button from './components/Button';\nimport TextBox from './components/TextBox';\nimport './styles.scss';\nimport { postGenerateTextEndpoint } from './utils';\n\nfunction postProcessText(text) {\n    const arr = text.split(/\\n/);\n    const resultArr = [];\n    arr.forEach((item, i) => {\n      if(i%1===0) resultArr.push(<br />);\n      resultArr.push(item);      \n    });\n  return resultArr;\n}\n\nfunction App() {\n  const [text, setText] = useState(\"\");\n  const [generatedText, postGenerateText] = postGenerateTextEndpoint();\n\n  const generateText = () => {\n    postGenerateText({ text, userId: 1 });\n  }\n\n  return (\n    <div className='app-container'>\n      <form noValidate autoComplete='off'>\n        <h1>Middle High German Scansion</h1>\n        <TextBox text={text} setText={setText} />\n        <Button onClick={generateText} />\n      </form>\n\n      {generatedText.pending &&\n        <div className='result pending'>Please wait</div>}\n\n      {generatedText.complete &&\n        (generatedText.error ?\n          <div className='result error'>Bad Request</div> :\n          <div className='result valid'>\n            {postProcessText(generatedText.data.body)}\n          </div>)}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}